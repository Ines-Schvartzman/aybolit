{"version":3,"file":"main.266745108275e66d8474.bundle.js","sources":["webpack:///./templates/cxl-x-card.js","webpack:///../cxl-ui/src/components/cxl-marketing-hero/index.js","webpack:///../cxl-ui/src/components/cxl-iron-form.js","webpack:///../cxl-ui/src/components/cxl-institute-content.js","webpack:///../cxl-ui/src/components/cxl-institute-content-header.js","webpack:///../cxl-ui/src/components/cxl-icon-nav/cxl-icon-nav-item.js","webpack:///../cxl-ui/src/components/cxl-icon-nav/index.js","webpack:///../cxl-ui/src/components/cxl-institute-layout/index.js","webpack:///../cxl-ui/src/components/cxl-marketing-nav/index.js","webpack:///../cxl-ui/src/styles/cxl-partner-logos-css.js","webpack:///../cxl-ui/src/components/cxl-minidegree-progress-widget/cxl-vaadin-accordion.js","webpack:///./templates/cxl-icon-nav.js","webpack:///../cxl-ui/src/components/cxl-card/cxl-base-card.js","webpack:///../cxl-ui/src/components/cxl-card/cxl-card-grid.js","webpack:///../cxl-ui/src/components/cxl-card/cxl-training-card.js","webpack:///../core/src/components/button.js","webpack:///../core/src/components/checkbox.js","webpack:///../core/src/components/progress.js","webpack:///../core/src/styles/range-base-css.js","webpack:///../core/src/components/range.js","webpack:///../core/src/components/switch.js"],"sourcesContent":["import { html } from 'lit-html';\n\nconst cards = {\n  training: html`\n    <cxl-training-card video=\"https://player.vimeo.com/video/316968481\">\n      <div\n        slot=\"thumbnail\"\n        part=\"thumbnail\"\n        style=\"background-image: url('https://conversionxli.warmpress.com/wp-content/uploads/_conversionxli/2018/12/measuring-quality-win-rate.jpg');\"\n      ></div>\n      <h2 slot=\"title\">Google Tag Manager - Intermediate</h2>\n      <p slot=\"content\">\n        Our flagship training program. Learn conversion research, start using a systematic way to\n        get more wins and bigger wins through optimization and testing.\n      </p>\n    </cxl-training-card>\n  `,\n  testimonial: html`\n    <cxl-testimonial-card>\n      <div\n        slot=\"thumbnail\"\n        part=\"thumbnail\"\n        style=\"background-image: url('https://conversionxli.warmpress.com/wp-content/uploads/_conversionxli/2018/11/Natalie-Jamieson-CXL-Institute-Graduate.jpeg');\"\n      ></div>\n      <img\n        slot=\"header-right\"\n        src=\"https://conversionxli.warmpress.com/wp-content/uploads/_conversionxli/2018/05/google-logo-new.png\"\n      />\n      <p slot=\"content\">\n        \"Our flagship training program. Learn conversion research, start using a systematic way to\n        get more wins and bigger wins through optimization and testing. Our flagship training\n        program.\"\n      </p>\n      <strong slot=\"footer\">Chris Kershaw</strong>\n      <span slot=\"footer\">Managing Director - Sweden, at Trollweb Solutions</span>\n    </cxl-testimonial-card>\n  `,\n  course: html`\n    <cxl-course-card>\n      <div\n        slot=\"thumbnail\"\n        part=\"thumbnail\"\n        style=\"background-image: url('https://conversionxli.warmpress.com/wp-content/uploads/_conversionxli/2018/12/measuring-quality-win-rate.jpg');\"\n      ></div>\n      <h2 slot=\"title\">Account based marketing</h2>\n      <small slot=\"title\">Ton Wesseling</small>\n      <p slot=\"content\">\n        Our flagship training program. Learn conversion research, start using a systematic way to\n        get more wins and bigger wins through optimization and testing.\n      </p>\n      <span slot=\"footer\">2 hours | Course | Analytics</span>\n    </cxl-course-card>\n  `,\n  minidegree: html`\n    <cxl-minidegree-card>\n      <div\n        slot=\"thumbnail\"\n        part=\"thumbnail\"\n        style=\"background-image: url('https://conversionxli.warmpress.com/wp-content/uploads/_conversionxli/2018/12/Illustrator_2018-12-19_15-34-43.jpg');\"\n      ></div>\n      <h2 slot=\"title\">\n        Conversion Optimization Minidegree Program\n      </h2>\n      <p slot=\"content\">\n        Our flagship training program. Learn conversion research, start using a systematic way to\n        get more wins and bigger wins through optimization and testing.\n      </p>\n      <a slot=\"footer\" href=\"#\">Curriculum &amp; enrollment info</a>\n    </cxl-minidegree-card>\n  `,\n  lesson: html`\n    <cxl-lesson-card>\n      <div\n        slot=\"thumbnail\"\n        part=\"thumbnail\"\n        style=\"background-image: url('https://conversionxli.warmpress.com/wp-content/uploads/_conversionxli/2018/10/Elizabeth-Linder-Content-Strategy-CXL-Institute-Graduate.jpeg');\"\n      ></div>\n      <h2 slot=\"header-right\"><strong>Class 1:</strong> Why websites fail?</h2>\n      <small slot=\"header-right\">Lesson | 1 hour | Karl Gilis</small>\n      <p slot=\"content\">\n        Our flagship training program. Learn conversion research, start using a systematic way to\n        get more wins and bigger wins through optimization and testing. Our flagship training\n        program. Learn conversion research, start using a systematic way to get more wins and bigger\n        wins through optimization and testing.\n      </p>\n    </cxl-lesson-card>\n  `\n};\n\nexport { cards };\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport { render } from 'lit-html';\nimport './theme.js';\nimport cxlThemeStyles from '../../styles/cxl-theme-css.js';\nimport cxlMarketingHeroStyles from '../../styles/cxl-marketing-hero-css.js';\n\n// Extend the LitElement base class\nclass CXLMarketingHeroElement extends LitElement {\n  static get properties() {\n    return {\n      backgroundImage: {\n        type: String,\n        attribute: 'background-image'\n      },\n      backgroundColor: {\n        type: String,\n        attribute: 'background-color'\n      },\n      heroStyle: {\n        type: String,\n        attribute: 'hero-style'\n      },\n      video: {\n        type: String\n      },\n      videoOpened: {\n        type: Boolean\n      }\n    };\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlMarketingHeroStyles];\n  }\n\n  constructor() {\n    super();\n\n    this._boundDialogRenderer = this.dialogRenderer.bind(this);\n  }\n\n  render() {\n    return html`\n      <div class=\"wrap\">\n        <slot name=\"topnav\"></slot>\n        <div class=\"bgimage\"></div>\n\n        <div class=\"flex\">\n          <div class=\"column\" part=\"hero-content\">\n            <slot></slot>\n          </div>\n\n          ${this.heroStyle === 'video'\n            ? html`\n                <div class=\"video column\">\n                  <div class=\"video-image\">\n                    <slot name=\"video\"></slot>\n                  </div>\n                </div>\n\n                <vaadin-dialog\n                  id=\"video\"\n                  theme=\"video\"\n                  ?opened=\"${this.videoOpened}\"\n                  @opened-changed=\"${this._onOpenedChanged}\"\n                  .renderer=\"${this._boundDialogRenderer}\"\n                >\n                </vaadin-dialog>\n              `\n            : ''}\n        </div>\n\n        <slot name=\"bottomnav\"></slot>\n        <slot name=\"catalog-search\"></slot>\n      </div>\n\n      ${this.heroStyle === 'waves'\n        ? html`\n            <svg class=\"waves\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path\n                d=\"M2054 128.79c-106.66 2.043-211.23 3.9-317.46 12.811-138.06 11.581-273.38 4.22-407.8-23.61C1134.57 77.796 984.18 17.54 742.28 14.259 565.44 11.857 259.72 7.614 0 0v246.37h2560c-65.21-27.369-126.32-63.768-195.36-84.649-98.3-29.68-205.7-34.945-310.64-32.932z\"\n                fill=\"#fff\"\n              ></path>\n            </svg>\n          `\n        : ''}\n    `;\n  }\n\n  firstUpdated() {\n    this.shadowRoot.querySelector('.wrap .bgimage').style.backgroundImage = `url(${\n      this.backgroundImage\n    })`;\n    this.style.backgroundColor = this.backgroundColor;\n\n    if (this.heroStyle === 'waves') {\n      document.querySelector('cxl-marketing-nav[nav-type=\"bottomnav\"]').setAttribute('waves', '');\n    }\n\n    if (this.video) {\n      this.shadowRoot.querySelector('.video-image').addEventListener('click', () => {\n        this.openVideo();\n      });\n    }\n  }\n\n  _onOpenedChanged(e) {\n    this.videoOpened = e.detail.value;\n  }\n\n  openVideo() {\n    this.videoOpened = true;\n  }\n\n  dialogRenderer(root) {\n    render(\n      html`\n        <iframe\n          src=\"${this.video}\"\n          width=\"800\"\n          height=\"440\"\n          frameborder=\"0\"\n          webkitallowfullscreen\n          mozallowfullscreen\n          allowfullscreen\n        ></iframe>\n      `,\n      root\n    );\n  }\n}\n\n// Register the new element with the browser.\ncustomElements.define('cxl-marketing-hero', CXLMarketingHeroElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport cxlThemeStyles from '../styles/cxl-theme-css.js';\nimport cxlIronFormStyles from '../styles/cxl-iron-form-css.js';\nimport '@polymer/iron-form';\n\n// Extend the LitElement base class\nclass CXLIronFormElement extends LitElement {\n  static get properties() {\n    return {\n      formMethod: {\n        type: String,\n        attribute: 'form-method'\n      },\n      formAction: {\n        type: String,\n        attribute: 'form-action'\n      }\n    };\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlIronFormStyles];\n  }\n\n  render() {\n    return html`\n      <iron-form>\n        <form method=\"${this.formMethod}\" action=\"${this.formAction}\">\n          <slot></slot>\n        </form>\n      </iron-form>\n\n      <div part=\"confirmation\" hidden>\n        <slot name=\"confirmation\"></slot>\n      </div>\n    `;\n  }\n\n  firstUpdated() {}\n\n  submit() {\n    const ironForm = this.shadowRoot.querySelector('iron-form');\n    const that = this;\n\n    if (ironForm.validate()) {\n      const formData = ironForm.serializeForm();\n      formData.created_at = new Date().toISOString().slice(0, 10);\n      formData.source_martech_id = 'custom';\n      formData.source = location.host;\n\n      fetch(this.formAction, {\n        method: this.formMethod,\n        crossDomain: true,\n        headers: {\n          'Content-type': 'multipart/form-data; charset=UTF-8'\n        },\n        data: formData,\n        processData: false,\n        contentType: false\n      })\n        .then(function(response) {\n          if (response.ok) {\n            const confirmationContent = that.shadowRoot.querySelector('[part=\"confirmation\"]');\n            confirmationContent.removeAttribute('hidden');\n            ironForm.setAttribute('hidden', '');\n          }\n        })\n        .catch(function(error) {\n          console.log('Request failed', error);\n        });\n    }\n  }\n}\n\n// Register the new element with the browser.\ncustomElements.define('cxl-iron-form', CXLIronFormElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport cxlThemeStyles from '../styles/cxl-theme-css.js';\nimport cxlInstituteContentStyles from '../styles/cxl-institute-content-css.js';\n\nclass CXLInstituteContentElement extends LitElement {\n  static get properties() {\n    return {\n      sidebarSize: {\n        type: String,\n        reflect: true\n      }\n    };\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlInstituteContentStyles];\n  }\n\n  render() {\n    return html`\n      <slot name=\"content-header\"></slot>\n      <slot name=\"content-video\"></slot>\n      <div part=\"content\" media-size=\"wide\">\n        <div class=\"wrap\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  firstUpdated() {\n    const appLayoutSelector = document.querySelector('cxl-institute-layout');\n    if (appLayoutSelector.hasAttribute('sidebarsize')) {\n      this.sidebarSize = appLayoutSelector.getAttribute('sidebarsize');\n    }\n  }\n}\n\ncustomElements.define('cxl-institute-content', CXLInstituteContentElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport cxlThemeStyles from '../styles/cxl-theme-css.js';\nimport cxlInstituteContentHeaderStyles from '../styles/cxl-institute-content-header-css.js';\n\nclass CXLInstituteContentHeaderElement extends LitElement {\n  static get properties() {\n    return {};\n  }\n\n  constructor() {\n    super();\n    this.hideSidebar = false;\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlInstituteContentHeaderStyles];\n  }\n\n  render() {\n    return html`\n      <div class=\"content-toggle\">\n        <a @click=\"${this._toggleContent}\">\n          <iron-icon class=\"size-m\" icon=\"lumo:menu\"></iron-icon>\n        </a>\n      </div>\n\n      <div class=\"header-title\">\n        <h1><slot></slot></h1>\n      </div>\n\n      <div class=\"header-button\">\n        <slot name=\"header-button\"></slot>\n      </div>\n    `;\n  }\n\n  _toggleContent() {\n    this.hideSidebar = !this.hideSidebar;\n    document.querySelector('cxl-institute-content').setAttribute('hidesidebar', this.hideSidebar);\n  }\n}\n\ncustomElements.define('cxl-institute-content-header', CXLInstituteContentHeaderElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport '@vaadin/vaadin-item';\nimport cxlThemeStyles from '../../styles/cxl-theme-css.js';\nimport cxlIconNavItemStyles from '../../styles/cxl-icon-nav-item-css.js';\n\nclass CXLIconNavItemElement extends LitElement {\n  static get properties() {\n    return {\n      href: {\n        type: String\n      },\n      title: {\n        type: String\n      }\n    };\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlIconNavItemStyles];\n  }\n\n  render() {\n    return html`\n      <a href=${ifDefined(this.href)}>\n        ${this.navItemContent}\n        ${this.title\n          ? html`\n              <span>${this.title}</span>\n            `\n          : ''}\n      </a>\n    `;\n  }\n\n  get navItemContent() {\n    const vaadinTab = this.parentNode;\n    const icon = `<iron-icon class=\"icon size-l\" icon=\"${this.innerHTML}\"></iron-icon>`;\n\n    switch (true) {\n      case vaadinTab.className.indexOf('--type-html') > 0:\n        return unsafeHTML(this.innerHTML);\n      case vaadinTab.className.indexOf('--search') > 0:\n        {\n          const searchDialog = document.querySelector('vaadin-dialog[theme=\"cxl-search-overlay\"]');\n\n          vaadinTab.addEventListener('click', function() {\n            searchDialog.opened = true;\n\n            const searchDialogOverlay = document.querySelector(\n              'vaadin-dialog-overlay[theme=\"cxl-search-overlay\"]'\n            );\n            const closeButton = searchDialogOverlay.querySelector('iron-icon[icon=\"lumo:cross\"]');\n\n            closeButton.addEventListener('click', function() {\n              searchDialog.opened = false;\n            });\n          });\n        }\n        return unsafeHTML(icon);\n      default:\n        return unsafeHTML(icon);\n    }\n  }\n}\n\ncustomElements.define('cxl-icon-nav-item', CXLIconNavItemElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport './theme.js';\nimport './cxl-icon-nav-item.js';\nimport '@vaadin/vaadin-dialog';\nimport cxlThemeStyles from '../../styles/cxl-theme-css.js';\n\nclass CXLIconNavElement extends LitElement {\n  static get properties() {\n    return {};\n  }\n\n  static get styles() {\n    return [cxlThemeStyles];\n  }\n\n  render() {\n    return html`\n      <vaadin-tabs theme=\"cxl-icon-nav\" orientation=\"horizontal\">\n        <slot></slot>\n      </vaadin-tabs>\n    `;\n  }\n\n  firstUpdated() {\n    const vaadinTabsElement = this.shadowRoot.querySelector('vaadin-tabs');\n\n    let width =\n      window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n    this._changeTabOrientation(vaadinTabsElement, width);\n\n    const that = this;\n    window.addEventListener('resize', () => {\n      width = document.body.clientWidth;\n      that._changeTabOrientation(vaadinTabsElement, width);\n    });\n  }\n\n  _changeTabOrientation(tabsElement, width) {\n    let orientation = 'vertical';\n\n    if ( width < 720 ) {\n      orientation = 'horizontal';\n    }\n\n    tabsElement.setAttribute( 'orientation', orientation );\n  }\n}\n\ncustomElements.define('cxl-icon-nav', CXLIconNavElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport './theme.js';\nimport '@vaadin/vaadin-tabs';\nimport '../cxl-institute-content.js';\nimport '../cxl-institute-content-header.js';\nimport '../cxl-icon-nav';\nimport cxlThemeStyles from '../../styles/cxl-theme-css.js';\nimport cxlInstituteLayoutStyles from '../../styles/cxl-institute-layout-css.js';\n\nexport class CXLInstituteLayoutElement extends LitElement {\n  static get properties() {\n    return {};\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlInstituteLayoutStyles];\n  }\n\n  render() {\n    return html`\n      <!-- Visible on mobile -->\n      <header part=\"mobile-header\">\n        <slot name=\"mobile-header-logo\"></slot>\n        <h2><slot name=\"mobile-header-title\"></slot></h2>\n      </header>\n\n      <!-- Visible on mobile -->\n      <vaadin-tabs\n        id=\"tabs\"\n        part=\"tabs\"\n        theme=\"equal-width-tabs cxl-institute-layout-tabs\"\n        selected=\"1\"\n      >\n        <vaadin-tab @click=\"${() => this.changeTab('sidebar')}\">Menu</vaadin-tab>\n        <vaadin-tab @click=\"${() => this.changeTab('content')}\">Something here</vaadin-tab>\n      </vaadin-tabs>\n\n      <nav part=\"icon-nav\">\n        <slot name=\"icon-nav\"></slot>\n      </nav>\n\n      <div part=\"sidebar\">\n        <header>\n          <slot name=\"sidebar-header\"></slot>\n        </header>\n\n        <slot name=\"sidebar-content\"></slot>\n      </div>\n\n      <main part=\"content\" page-visible>\n        <slot></slot>\n      </main>\n    `;\n  }\n\n  firstUpdated() {\n    this.changeTab('content');\n  }\n\n  changeTab(tab) {\n    this.shadowRoot.querySelector('[page-visible]').removeAttribute('page-visible');\n    this.shadowRoot.querySelector(`[part=${tab}]`).setAttribute('page-visible', '');\n  }\n}\n\ncustomElements.define('cxl-institute-layout', CXLInstituteLayoutElement);\n","// Import the LitElement base class and html helper function\nimport { LitElement, html } from 'lit-element';\nimport './theme.js';\nimport cxlThemeStyles from '../../styles/cxl-theme-css.js';\nimport cxlMarketingNavStyles from '../../styles/cxl-marketing-nav-css.js';\n\nclass CXLMarketingNavElement extends LitElement {\n  static get properties() {\n    return {\n      navType: {\n        type: String,\n        attribute: 'nav-type'\n      },\n      fixed: {\n        type: Boolean,\n        value: false,\n        reflect: true\n      },\n      mobileNav: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlMarketingNavStyles];\n  }\n\n  render() {\n    return html`\n      <slot name=\"cxl-logo\"></slot>\n      <nav part=\"${this.navType}\" class=\"${this.fixed ? 'fixed' : ''}\">\n        ${this.navType === 'topnav'\n          ? html`\n              <div class=\"wrap\">\n                <slot></slot>\n              </div>\n            `\n          : html`\n              <div class=\"wrap\">\n                <slot></slot>\n              </div>\n            `}\n      </nav>\n    `;\n  }\n\n  firstUpdated() {\n    const that = this;\n    document.querySelector('body').addEventListener('scroll', function() {\n      if (!that._isScrolledIntoView(that)) {\n        that.setAttribute('fixed', '');\n      } else {\n        that.removeAttribute('fixed');\n      }\n    });\n\n    if (this.navType === 'topnav') {\n      const mobileNavButtons = [\n        document.querySelector(\n          'cxl-marketing-nav vaadin-tabs vaadin-tab[theme=\"cxl-marketing-nav-tab cxl-mobile-icon\"] a'\n        ),\n        document.querySelector(\n          'cxl-marketing-nav vaadin-tabs vaadin-tab[theme=\"cxl-marketing-nav-tab cxl-mobile-nav-icon\"] a'\n        )\n      ];\n\n      mobileNavButtons.forEach(function(elem) {\n        elem.addEventListener('click', function(e) {\n          e.preventDefault();\n          that.toggleMobileNav();\n        });\n      });\n    }\n  }\n\n  _isScrolledIntoView(el) {\n    const rect = el.getBoundingClientRect();\n    const elemTop = rect.top;\n    const isVisible = elemTop >= 0;\n\n    return isVisible;\n  }\n\n  toggleMobileNav() {\n    this.mobileNav = !this.mobileNav;\n\n    this.setAttribute('orientation', 'horizontal');\n    this.querySelector('vaadin-tabs').setAttribute('orientation', 'horizontal');\n\n    if (this.mobileNav) {\n      this.setAttribute('orientation', 'vertical');\n      this.querySelector('vaadin-tabs').setAttribute('orientation', 'vertical');\n    }\n  }\n}\n\ncustomElements.define('cxl-marketing-nav', CXLMarketingNavElement);\n","import { css } from 'lit-element';\n\nexport default css`﻿body:before{background-color:#fcf8e3;border-bottom:1px solid #fbeed5;border-left:1px solid #fbeed5;color:#c09853;font:small-caption;padding:3px 6px;pointer-events:none;position:fixed;right:0;top:0;z-index:100}@media(min-width: 20em){body:before{content:\"mobile ≥ 20em (20em)\"}}@media(min-width: 30em){body:before{content:\"mobilelandscape ≥ 30em (30em)\"}}@media(min-width: 45em){body:before{content:\"tablet ≥ 45em (45em)\"}}@media(min-width: 60em){body:before{content:\"desktop ≥ 60em (60em)\"}}@media(min-width: 80em){body:before{content:\"wide ≥ 80em (80em)\"}}:host{grid-column-gap:10px;grid-row-gap:15px;grid-template-columns:100px 50px 100px;grid-template-rows:80px auto 80px;padding:var(--lumo-space-m) 0}:host ::slotted(*){padding:0 var(--lumo-space-l)}@media(min-width: 45em){:host{display:flex;flex-direction:row;justify-content:center}}`;\n","import '@vaadin/vaadin-accordion';\nimport { AccordionElement } from '@vaadin/vaadin-accordion/src/vaadin-accordion';\n\nclass CXLVaadinAccordion extends AccordionElement {\n  _updateOpened(e) {\n    const target = this._filterItems(e.composedPath())[0];\n    const idx = this.items.indexOf(target);\n    if (e.detail.value) {\n      if (target.disabled || idx === -1) {\n        return;\n      }\n\n      this.opened = idx;\n    } else if (!this.items.some(item => item.opened)) {\n      this.opened = null;\n    }\n  }\n\n  _updateItems() {}\n}\n\ncustomElements.define('cxl-vaadin-accordion', CXLVaadinAccordion);\n","import { html } from 'lit-html';\n\nexport default html`\n  <cxl-icon-nav slot=\"icon-nav\">\n    <vaadin-tab>\n      <cxl-icon-nav-item>cxl:logo</span></cxl-icon-nav-item>\n    </vaadin-tab>\n    <vaadin-tab class=\"menu__item menu__item--search\">\n      <cxl-icon-nav-item title=\"Search\">lumo:search</cxl-icon-nav-item>\n    </vaadin-tab>\n    <vaadin-tab>\n      <cxl-icon-nav-item title=\"Training\" href=\"#\">cxl:nav-trainings</cxl-icon-nav-item>\n    </vaadin-tab>\n    <vaadin-tab>\n      <cxl-icon-nav-item title=\"Roadmap\" href=\"#\">cxl:nav-roadmap</cxl-icon-nav-item>\n    </vaadin-tab>\n    <vaadin-tab>\n      <cxl-icon-nav-item title=\"Discover\" href=\"#\">cxl:nav-discover</cxl-icon-nav-item>\n    </vaadin-tab>\n    <vaadin-tab class=\"menu__item menu__item--type-html\">\n      <cxl-icon-nav-item href=\"#\" title=\"Account\"><img class=\"avatar\" src=\"https://randomuser.me/api/portraits/women/47.jpg\" /></cxl-icon-nav-item>\n    </vaadin-tab>\n    <vaadin-tab theme=\"cxl-icon-nav-item-button\">\n      <vaadin-button theme=\"primary\">\n        Start course\n      </vaadin-button>\n    </vaadin-tab>\n  </cxl-icon-nav>\n`;\n","import { LitElement, html } from 'lit-element';\nimport baseCardStyles from '../../styles/cxl-base-card-css.js';\n\nexport class CXLBaseCard extends LitElement {\n  static get properties() {\n    return {};\n  }\n\n  static get styles() {\n    return [baseCardStyles];\n  }\n\n  render() {\n    return html`\n      <header>\n        <slot name=\"thumbnail\"></slot>\n        <div part=\"header-right\">\n          <slot name=\"header-right\"></slot>\n        </div>\n      </header>\n      <slot name=\"title\"></slot>\n      <slot name=\"content\"></slot>\n      <footer>\n        <slot name=\"footer\"></slot>\n      </footer>\n    `;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.setAttribute('role', 'article');\n  }\n}\n","import { LitElement, html } from 'lit-element';\nimport SimpleBar from 'simplebar/dist/simplebar';\nimport cxlThemeStyles from '../../styles/cxl-theme-css.js';\nimport cxlCardGridStyles from '../../styles/cxl-card-grid-css.js';\n\nexport class CXLCardGridElement extends LitElement {\n  static get properties() {\n    return {\n      flow: {\n        type: String,\n        reflect: true\n      },\n      columns: {\n        type: Number\n      },\n      simplebarObject: {\n        type: Object\n      },\n      originalGridContent: {\n        type: String\n      }\n    };\n  }\n\n  static get styles() {\n    return [cxlThemeStyles, cxlCardGridStyles];\n  }\n\n  render() {\n    return html`\n      <div class=\"grid-container\">\n        <div class=\"wrap\">\n          <div class=\"grid\">\n            <slot></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.setAttribute('role', 'article');\n\n    let gridContainer = this.shadowRoot.querySelector('.grid-container');\n    this.originalGridContent = gridContainer.innerHTML;\n\n    if (this.flow === 'horizontal') {\n      this._initSimplebar();\n    }\n\n    const that = this;\n\n    if (!this.flow || this.flow === 'auto') {\n      const mq = window.matchMedia('(max-width: 60em)');\n\n      if (mq.matches) {\n        this.flow = 'auto';\n        this._initSimplebar(gridContainer);\n      }\n\n      mq.addListener(function(changed) {\n        gridContainer = that.shadowRoot.querySelector('.grid-container');\n        if (changed.matches) {\n          that.flow = 'auto';\n          that._initSimplebar(gridContainer);\n        } else {\n          that._destroySimplebar(gridContainer);\n        }\n      });\n    }\n\n    this._setGridColumns();\n  }\n\n  _setGridColumns() {\n    if (!this.columns) return;\n\n    const gridElement = this.shadowRoot.querySelector('.grid');\n    gridElement.style.gridTemplateColumns = `repeat(${this.columns}, minmax(260px, 1fr))`;\n  }\n\n  _destroySimplebar(gridContainer) {\n    this.flow = null;\n\n    if (!this.simplebarObject) {\n      return;\n    }\n\n    this.simplebarObject = null;\n\n    if (gridContainer.parentNode) {\n      gridContainer.parentNode.removeChild(gridContainer);\n    }\n\n    const gridContainerElement = document.createElement('div');\n    gridContainerElement.classList.add('grid-container');\n    gridContainerElement.innerHTML = this.originalGridContent;\n    this.shadowRoot.appendChild(gridContainerElement);\n\n    this._setGridColumns();\n  }\n\n  _initSimplebar() {\n    const gridContainer = this.shadowRoot.querySelector('.grid-container');\n\n    this.simplebarObject = new SimpleBar(gridContainer, {\n      forceVisible: 'x',\n      autoHide: false\n    });\n\n    const wrapper = document.createElement('div');\n    wrapper.classList.add('wrap');\n\n    const scrollElement = this.shadowRoot.querySelector('.simplebar-track.simplebar-horizontal');\n\n    scrollElement.parentNode.insertBefore(wrapper, scrollElement);\n\n    wrapper.appendChild(scrollElement);\n  }\n}\n\ncustomElements.define('cxl-card-grid', CXLCardGridElement);\n","import { html } from 'lit-element';\nimport { render } from 'lit-html';\nimport '@vaadin/vaadin-dialog';\nimport { CXLBaseCard } from './cxl-base-card.js';\nimport trainingCardStyles from '../../styles/cxl-training-card-css.js';\n\nexport class CXLTrainingCard extends CXLBaseCard {\n  static get styles() {\n    return [super.styles, trainingCardStyles];\n  }\n\n  static get properties() {\n    return {\n      opened: {\n        type: Boolean\n      },\n      video: {\n        type: String\n      }\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.addEventListener('click', () => {\n      this.open();\n    });\n\n    this._boundDialogRenderer = this.dialogRenderer.bind(this);\n  }\n\n  render() {\n    // TODO: get HTML from cxl-base-card\n    return html`\n      <header>\n        <slot name=\"thumbnail\"></slot>\n        <div part=\"header-right\">\n          <slot name=\"header-right\"></slot>\n        </div>\n      </header>\n      <slot name=\"title\"></slot>\n      <slot name=\"content\"></slot>\n      <footer>\n        <slot name=\"footer\"></slot>\n      </footer>\n\n      <vaadin-dialog\n        id=\"video\"\n        theme=\"video\"\n        ?opened=\"${this.opened}\"\n        @opened-changed=\"${this._onOpenedChanged}\"\n        .renderer=\"${this._boundDialogRenderer}\"\n      >\n      </vaadin-dialog>\n    `;\n  }\n\n  _onOpenedChanged(e) {\n    this.opened = e.detail.value;\n  }\n\n  open() {\n    this.opened = true;\n  }\n\n  dialogRenderer(root) {\n    render(\n      html`\n        <iframe\n          src=\"${this.video}\"\n          width=\"800\"\n          height=\"440\"\n          frameborder=\"0\"\n          webkitallowfullscreen\n          mozallowfullscreen\n          allowfullscreen\n        ></iframe>\n      `,\n      root\n    );\n  }\n}\n\ncustomElements.define('cxl-training-card', CXLTrainingCard);\n","import { LitElement, html } from 'lit-element';\nimport { DelegateFocusMixin } from '../mixins/delegate-focus-mixin.js';\nimport buttonBaseStyles from '../styles/button-base-css.js';\n\nexport class ButtonElement extends DelegateFocusMixin(LitElement) {\n  static get properties() {\n    return {\n      /**\n       * Set to URL to render <a> element styled as button.\n       */\n      link: {\n        type: String,\n        reflect: true\n      }\n    };\n  }\n\n  static get styles() {\n    return buttonBaseStyles;\n  }\n\n  render() {\n    return html`\n      ${this.link\n        ? html`\n            <a class=\"button\" href=\"${this.link}\" ?disabled=\"${this.disabled}\">\n              <slot></slot>\n            </a>\n          `\n        : html`\n            <button type=\"button\" class=\"button\" ?disabled=\"${this.disabled}\" role=\"presentation\">\n              <slot></slot>\n            </button>\n          `}\n    `;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.setAttribute('role', 'button');\n  }\n\n  /**\n   * @protected\n   */\n  get focusElement() {\n    return this.shadowRoot.querySelector('.button');\n  }\n}\n","import { LitElement, html } from 'lit-element';\nimport { DelegateFocusMixin } from '../mixins/delegate-focus-mixin.js';\nimport checkboxBaseStyles from '../styles/checkbox-base-css.js';\n\nconst $$name = Symbol('name');\n\nexport class CheckboxElement extends DelegateFocusMixin(LitElement) {\n  static get properties() {\n    return {\n      /**\n       * True if the checkbox is checked.\n       */\n      checked: {\n        type: Boolean,\n        reflect: true\n      },\n\n      /**\n       * Indeterminate is a state in which it's impossible to say\n       * whether the checkbox is toggled on or off.\n       */\n      indeterminate: {\n        type: Boolean,\n        reflect: true\n      },\n\n      /**\n       * The value given to the data submitted with the name\n       * to the server when the checkbox is inside a form.\n       */\n      value: {\n        reflect: true\n      }\n    };\n  }\n\n  static get styles() {\n    return checkboxBaseStyles;\n  }\n\n  constructor() {\n    super();\n    this.checked = false;\n    this.value = 'on';\n  }\n\n  render() {\n    return html`\n      <label class=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          class=\"input\"\n          ?checked=\"${this.checked}\"\n          ?disabled=\"${this.disabled}\"\n          .indeterminate=\"${this.indeterminate}\"\n          @change=\"${this._onChange}\"\n          role=\"presentation\"\n          tabindex=\"-1\"\n        />\n        <span class=\"label\"><slot></slot></span>\n      </label>\n    `;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n\n    const name = this.getAttribute('name');\n    if (name) {\n      this.name = name;\n    }\n\n    this.setAttribute('role', 'checkbox');\n  }\n\n  update(props) {\n    super.update(props);\n\n    if (props.has('indeterminate')) {\n      this._indeterminateChanged(this.indeterminate);\n    }\n\n    if (props.has('checked')) {\n      this._checkedChanged(this.checked);\n    }\n  }\n\n  get focusElement() {\n    return this.shadowRoot.querySelector('input');\n  }\n\n  get name() {\n    return this.checked ? this[$$name] : '';\n  }\n\n  set name(name) {\n    this[$$name] = name;\n  }\n\n  _checkedChanged(checked) {\n    if (this.indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', checked);\n    }\n    this.dispatchEvent(\n      new CustomEvent('checked-changed', {\n        detail: { value: checked }\n      })\n    );\n  }\n\n  _indeterminateChanged(indeterminate) {\n    if (indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', this.checked);\n    }\n  }\n\n  _onChange(e) {\n    const target = e.composedPath()[0];\n    this.checked = target.checked;\n    this.indeterminate = target.indeterminate;\n\n    // In the Shadow DOM, the `change` event is not leaked\n    // into the ancestor tree, so we must do this manually.\n    const changeEvent = new CustomEvent('change', {\n      detail: {\n        sourceEvent: e\n      },\n      bubbles: e.bubbles,\n      cancelable: e.cancelable\n    });\n    this.dispatchEvent(changeEvent);\n  }\n}\n","import { LitElement, html } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport progressBaseStyles from '../styles/progress-base-css.js';\n\nexport class ProgressElement extends LitElement {\n  static get properties() {\n    return {\n      /**\n       * Current progress value. Set to null, undefined\n       * or empty string to set indeterminate state.\n       */\n      value: {\n        type: Number\n      },\n\n      /**\n       * Maximum bound to the native progress element.\n       * Note: the minimum value is always 0.\n       */\n      max: {\n        type: Number\n      }\n    };\n  }\n\n  static get styles() {\n    return progressBaseStyles;\n  }\n\n  constructor() {\n    super();\n    this.value = 0;\n    this.max = 1;\n  }\n\n  render() {\n    let { value } = this;\n    // make progress bar indeterminate\n    if (value === null || value === '') {\n      value = undefined;\n    }\n    return html`\n      <progress value=\"${ifDefined(value)}\" max=\"${this.max}\"></progress>\n    `;\n  }\n}\n","import { css } from 'lit-element';\n\nexport default css`:host{display:block}:host([hidden]){display:none !important}.range{width:100%;padding:0;margin:0;background-color:transparent;-webkit-appearance:none;-moz-appearance:none;appearance:none}.range::-moz-focus-outer{border:0}.range::-ms-tooltip{display:none}.range::-webkit-slider-runnable-track{width:100%}.range::-moz-range-track{width:100%}.range::-ms-track{width:100%;color:transparent}.range::-webkit-slider-thumb{border:none;-webkit-appearance:none;appearance:none}.range::-moz-range-thumb{border:none;-moz-appearance:none;appearance:none}.range::-ms-thumb{border:none;appearance:none}`;\n","import { LitElement, html } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nimport { DelegateFocusMixin } from '../mixins/delegate-focus-mixin.js';\nimport rangeBaseStyles from '../styles/range-base-css.js';\n\nconst isNumeric = n => !isNaN(parseFloat(n)) && isFinite(n);\n\nexport class RangeElement extends DelegateFocusMixin(LitElement) {\n  static get properties() {\n    return {\n      value: {\n        type: Number\n      },\n\n      min: {\n        type: Number\n      },\n\n      max: {\n        type: Number\n      },\n\n      step: {\n        type: Number\n      }\n    };\n  }\n\n  static get styles() {\n    return [rangeBaseStyles];\n  }\n\n  constructor() {\n    super();\n    this.value = 0;\n    this.min = 0;\n    this.max = 100;\n    this.step = 1;\n  }\n\n  render() {\n    return html`\n      <input\n        type=\"range\"\n        class=\"range\"\n        .value=\"${this.value}\"\n        min=\"${ifDefined(this.min)}\"\n        max=\"${ifDefined(this.max)}\"\n        step=\"${ifDefined(this.step)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-valuemin=\"${ifDefined(this.min)}\"\n        aria-valuemax=\"${ifDefined(this.max)}\"\n        aria-valuenow=\"${this.value}\"\n        @input=\"${this._onInput}\"\n        @change=\"${this._onChange}\"\n      />\n    `;\n  }\n\n  update(props) {\n    if (props.has('value')) {\n      if (isNumeric(this.value)) {\n        if (isNumeric(this.min) && this.value < this.min) {\n          this.value = this.min;\n        } else if (isNumeric(this.max) && this.value > this.max) {\n          this.value = this.max;\n        }\n      } else {\n        this.value = (this.max - this.min) / 2 + this.min;\n      }\n    }\n\n    if (props.has('min')) {\n      if (!isNumeric(this.min)) {\n        this.min = 0;\n      }\n    }\n\n    if (props.has('max')) {\n      if (!isNumeric(this.max)) {\n        this.max = 100;\n      }\n    }\n\n    if (props.has('step')) {\n      if (!isNumeric(this.step)) {\n        this.step = 1;\n      }\n    }\n\n    super.update(props);\n  }\n\n  updated(props) {\n    super.updated(props);\n\n    if (props.has('value')) {\n      this.dispatchEvent(\n        new CustomEvent('value-changed', {\n          detail: {\n            value: this.value\n          }\n        })\n      );\n    }\n  }\n\n  get focusElement() {\n    return this.shadowRoot.querySelector('.range');\n  }\n\n  _onChange(e) {\n    // In the Shadow DOM, the `change` event is not leaked\n    // into the ancestor tree, so we must do this manually.\n    const changeEvent = new CustomEvent('change', {\n      detail: {\n        sourceEvent: e\n      },\n      bubbles: e.bubbles,\n      cancelable: e.cancelable\n    });\n    this.dispatchEvent(changeEvent);\n  }\n\n  _onInput(e) {\n    this.value = Number(e.target.value);\n  }\n}\n","import { LitElement, html } from 'lit-element';\nimport { DelegateFocusMixin } from '../mixins/delegate-focus-mixin.js';\nimport switchBaseStyles from '../styles/switch-base-css.js';\n\nexport class SwitchElement extends DelegateFocusMixin(LitElement) {\n  static get properties() {\n    return {\n      /**\n       * True if the checkbox is checked.\n       */\n      checked: {\n        type: Boolean,\n        reflect: true\n      }\n    };\n  }\n\n  static get styles() {\n    return [switchBaseStyles];\n  }\n\n  constructor() {\n    super();\n    this.checked = false;\n  }\n\n  render() {\n    return html`\n      <label class=\"switch\">\n        <input\n          type=\"checkbox\"\n          class=\"input\"\n          ?checked=\"${this.checked}\"\n          ?disabled=\"${this.disabled}\"\n          @change=\"${this._onChange}\"\n          role=\"presentation\"\n          tabindex=\"-1\"\n        />\n        <span class=\"label\"><slot></slot></span>\n      </label>\n    `;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n\n    this.setAttribute('role', 'switch');\n    this.setAttribute('data-action', 'aria-switch');\n  }\n\n  update(props) {\n    super.update(props);\n\n    if (props.has('checked')) {\n      this._checkedChanged(this.checked);\n    }\n  }\n\n  get focusElement() {\n    return this.shadowRoot.querySelector('input');\n  }\n\n  _checkedChanged(checked) {\n    this.setAttribute('aria-checked', checked);\n    this.dispatchEvent(\n      new CustomEvent('checked-changed', {\n        detail: { value: checked }\n      })\n    );\n  }\n\n  _onChange(e) {\n    const target = e.composedPath()[0];\n    this.checked = target.checked;\n\n    // In the Shadow DOM, the `change` event is not leaked\n    // into the ancestor tree, so we must do this manually.\n    const changeEvent = new CustomEvent('change', {\n      detail: {\n        sourceEvent: e\n      },\n      bubbles: e.bubbles,\n      cancelable: e.cancelable\n    });\n    this.dispatchEvent(changeEvent);\n  }\n}\n"],"mappings":"AAEA;;;;;;;;;;ACmDA;;;;;;;;;;AAWA;AACA;AACA;;;AAIA;;;;;;;AAOA;;;;;;;AASA;AAIA;;AA6BA;;;;;;;;AASA;;ACpGA;;;;;;;;AAWA;;;;;;;;ACRA;;ACTA;;;;;;;;;;;;AAeA;ACXA;AACA;AACA;AAEA;AAEA;;AAKA;;;;ACbA;;;;;;;;;;;;;;ACUA;AACA;;;;;;;;;;;;;;;;;;AAqBA;;ACxBA;AACA;;;;;;AAeA;;AC9CA;;ACmBA;;ACnBA;;;;;;;;;;;;AC0BA;;;;;;;;ACYA;;;;;;;;;;;;;;;;ACUA;AACA;AACA;;;AAMA;;AAYA;;;;;;;;AASA;ACxDA;AAEA;;;AAIA;AACA;;;;AAOA;;;;;ACeA;AACA;AACA;AACA;;;;;;AASA;ACtBA;ACxCA;;;;AC2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;;;;AC3BA;AACA;AACA;;;;;;AASA","sourceRoot":""}